{"ast":null,"code":"import _objectSpread from\"/Users/mithilproof/Oleic/react-dep/simon-says/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{START_GAME,GUESS_COLOR,NEXT_LEVEL}from'../actions/game';export var initialState={guessed:[],all:[]};export default function blocks(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var type=action.type,payload=action.payload;switch(type){case START_GAME:return{guessed:[],all:[payload.next]};case NEXT_LEVEL:return{guessed:[],all:state.all.concat(payload.next)};case GUESS_COLOR:return _objectSpread(_objectSpread({},state),{},{guessed:payload.succeeded?state.guessed.concat(payload.id):state.guessed});default:return state;}}","map":{"version":3,"sources":["/Users/mithilproof/Oleic/react-dep/simon-says/src/reducers/match.js"],"names":["START_GAME","GUESS_COLOR","NEXT_LEVEL","initialState","guessed","all","blocks","state","action","type","payload","next","concat","succeeded","id"],"mappings":"mKAAA,OAASA,UAAT,CAAqBC,WAArB,CAAkCC,UAAlC,KAAoD,iBAApD,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,CAC1BC,OAAO,CAAE,EADiB,CAE1BC,GAAG,CAAE,EAFqB,CAArB,CAKP,cAAe,SAASC,CAAAA,MAAT,EAA8C,IAA9BC,CAAAA,KAA8B,2DAAtBJ,YAAsB,IAARK,CAAAA,MAAQ,8CACnDC,CAAAA,IADmD,CACjCD,MADiC,CACnDC,IADmD,CAC7CC,OAD6C,CACjCF,MADiC,CAC7CE,OAD6C,CAE3D,OAAOD,IAAP,EACE,IAAKT,CAAAA,UAAL,CACE,MAAO,CACLI,OAAO,CAAE,EADJ,CAELC,GAAG,CAAE,CACHK,OAAO,CAACC,IADL,CAFA,CAAP,CAOF,IAAKT,CAAAA,UAAL,CACE,MAAO,CACLE,OAAO,CAAE,EADJ,CAELC,GAAG,CAAEE,KAAK,CAACF,GAAN,CAAUO,MAAV,CAAiBF,OAAO,CAACC,IAAzB,CAFA,CAAP,CAKF,IAAKV,CAAAA,WAAL,CACE,sCACIM,KADJ,MAEEH,OAAO,CAAEM,OAAO,CAACG,SAAR,CAAoBN,KAAK,CAACH,OAAN,CAAcQ,MAAd,CAAqBF,OAAO,CAACI,EAA7B,CAApB,CAAuDP,KAAK,CAACH,OAFxE,GAKF,QACE,MAAOG,CAAAA,KAAP,CAtBJ,CAwBD","sourcesContent":["import { START_GAME, GUESS_COLOR, NEXT_LEVEL } from '../actions/game';\n\nexport const initialState = {\n  guessed: [],\n  all: [],\n}\n\nexport default function blocks(state = initialState, action) {\n  const { type, payload } = action;\n  switch(type) {\n    case START_GAME:\n      return {\n        guessed: [],\n        all: [\n          payload.next,\n        ],\n      }\n\n    case NEXT_LEVEL:\n      return {\n        guessed: [],\n        all: state.all.concat(payload.next),\n      }\n\n    case GUESS_COLOR:\n      return {\n       ...state,\n        guessed: payload.succeeded ? state.guessed.concat(payload.id) : state.guessed,\n      }\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}